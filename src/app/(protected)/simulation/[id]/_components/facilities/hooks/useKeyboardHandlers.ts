import { useCallback } from "react";
import React from "react";
import { HistoryAction } from "./useUndoHistory";

interface UseKeyboardHandlersProps {
  selectedCells: Set<string>;
  displaySelectedCells: Set<string>;
  contextMenu: {
    show: boolean;
  };
  disabledCells: Set<string>;
  setDisabledCells: React.Dispatch<React.SetStateAction<Set<string>>>;
  setCellBadges: React.Dispatch<React.SetStateAction<Record<string, any[]>>>;
  cellBadges: Record<string, any[]>;
  cellProcessTimes: Record<string, number>;
  setCellProcessTimes: React.Dispatch<
    React.SetStateAction<Record<string, number>>
  >;
  undoHistory: {
    pushHistory: (action: HistoryAction) => void;
  };
  handleUndo: () => void;
  handleRedo: () => void;
  handleCopy: () => void;
  handlePaste: () => void;
  copiedData: any;
  showMarchingAnts: boolean;
  setShowMarchingAnts: (show: boolean) => void;
  setCopiedData: (data: any) => void;
  setSelectedCells: (cells: Set<string>) => void;
  setShiftSelectStart: (start: any) => void;
  containerRef: React.RefObject<HTMLDivElement | null>;
}

export function useKeyboardHandlers({
  selectedCells,
  displaySelectedCells,
  contextMenu,
  disabledCells,
  setDisabledCells,
  setCellBadges,
  cellBadges,
  cellProcessTimes,
  setCellProcessTimes,
  undoHistory,
  handleUndo,
  handleRedo,
  handleCopy,
  handlePaste,
  copiedData,
  showMarchingAnts,
  setShowMarchingAnts,
  setCopiedData,
  setSelectedCells,
  setShiftSelectStart,
  containerRef,
}: UseKeyboardHandlersProps) {
  // üõ°Ô∏è ÌÇ§Î≥¥Îìú Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨ (Ïª¥Ìè¨ÎÑåÌä∏ Ïä§ÏΩîÌîÑÎ°ú Ï†úÌïú)
  const handleKeyDown = useCallback(
    (e: React.KeyboardEvent) => {
      // üöÄ Ïª®ÌÖçÏä§Ìä∏ Î©îÎâ¥Í∞Ä Ïó¥Î†§ÏûàÏùÑ ÎïåÎßå ÌäπÏ†ï ÌÇ§ Ï∞®Îã®
      if (contextMenu.show) {
        // Input, Popover Îì± Îã§Î•∏ UI ÏöîÏÜåÍ∞Ä ÌÉÄÍ≤üÏù∏ Í≤ΩÏö∞Îäî Ï∞®Îã®ÌïòÏßÄ ÏïäÏùå
        const target = e.target as HTMLElement;
        if (
          target.tagName === "INPUT" ||
          target.closest('[role="dialog"]') ||
          target.closest("[data-radix-popper-content-wrapper]")
        ) {
          return; // InputÏù¥ÎÇò ÌåùÏóÖ ÎÇ¥Î∂ÄÏóêÏÑúÎäî ÌÇ§Î≥¥Îìú Ïù¥Î≤§Ìä∏ ÌóàÏö©
        }

        if (e.code === "Escape") {
          // ESC ÌÇ§Îßå ÌóàÏö© - Î©îÎâ¥Î•º Îã´Í∏∞ ÏúÑÌï¥
          return; // DropdownMenuÏùò onEscapeKeyDownÏù¥ Ï≤òÎ¶¨ÌïòÎèÑÎ°ù Ìï®
        } else {
          // ÌÖåÏù¥Î∏î ÏòÅÏó≠ÏóêÏÑúÎßå ÎÇòÎ®∏ÏßÄ ÌÇ§Îäî Î¨¥Ïãú
          e.preventDefault();
          e.stopPropagation();
          return;
        }
      }

      // üéØ Ìè¨Ïª§Ïä§ ÌôïÏù∏ Î∞è Î≥¥Ïû•
      if (document.activeElement !== containerRef.current) {
        containerRef.current?.focus();
      }

      // Cmd/Ctrl + C: Copy
      if ((e.metaKey || e.ctrlKey) && e.code === "KeyC") {
        e.preventDefault();
        handleCopy();
        return;
      }

      // Cmd/Ctrl + V: Paste
      if ((e.metaKey || e.ctrlKey) && e.code === "KeyV") {
        e.preventDefault();
        handlePaste();
        // Hide marching ants after paste but keep selection
        setShowMarchingAnts(false);
        return;
      }

      // ESC: Clear copy selection and marching ants
      if (e.code === "Escape") {
        if (showMarchingAnts) {
          setShowMarchingAnts(false);
        } else if (copiedData) {
          setCopiedData(null);
        }
        return;
      }

      // Space: Toggle disabled state for selected cells
      if (e.code === "Space") {
        e.preventDefault();
        const selectedCellsArray = Array.from(displaySelectedCells);
        if (selectedCellsArray.length === 0) return;

        // Check if all selected cells are currently disabled
        const allDisabled = selectedCellsArray.every((cellId) =>
          disabledCells.has(cellId)
        );

        // Save previous states for undo
        const previousStates = new Map<string, boolean>();
        selectedCellsArray.forEach((cellId) => {
          previousStates.set(cellId, disabledCells.has(cellId));
        });

        // Toggle disabled state
        setDisabledCells((prev: Set<string>) => {
          const newSet = new Set(prev);
          selectedCellsArray.forEach((cellId) => {
            if (allDisabled) {
              // If all are disabled, enable them
              newSet.delete(cellId);
            } else {
              // If any are enabled, disable all
              newSet.add(cellId);
            }
          });
          return newSet;
        });

        // Save new states for undo
        const newStates = new Map<string, boolean>();
        selectedCellsArray.forEach((cellId) => {
          newStates.set(cellId, !allDisabled);
        });

        // Add to undo history
        undoHistory.pushHistory({
          type: "toggleDisabled",
          cellIds: selectedCellsArray,
          previousStates,
          newStates,
        });

        return;
      }

      // Cmd/Ctrl + Z: Ïã§Ìñâ Ï∑®ÏÜå
      if ((e.metaKey || e.ctrlKey) && e.code === "KeyZ" && !e.shiftKey) {
        e.preventDefault();
        handleUndo();
        return;
      }

      // Ïû¨Ïã§Ìñâ: MacÏùÄ Cmd+Shift+Z, Windows/LinuxÎäî Ctrl+Y
      if (
        (e.metaKey && e.shiftKey && e.code === "KeyZ") || // Mac
        (e.ctrlKey && e.code === "KeyY")
      ) {
        // Windows/Linux
        e.preventDefault();
        handleRedo();
        return;
      }

      if (e.code === "Escape") {
        // ESC: Î™®Îì† ÏÑ†ÌÉù Ìï¥Ï†ú
        e.preventDefault();
        setSelectedCells(new Set());
        setShiftSelectStart(null);
      } else if (e.code === "Delete" || e.code === "Backspace") {
        // Delete/Backspace: ÏÑ†ÌÉùÎêú ÏÖÄÎì§Ïùò Î±ÉÏßÄ Ï†úÍ±∞ (Îπà ÏÉÅÌÉúÎ°ú ÎßåÎì§Í∏∞)
        e.preventDefault();

        if (selectedCells.size > 0) {
          const targetCells = Array.from(selectedCells);

          // ÌûàÏä§ÌÜ†Î¶¨Î•º ÏúÑÌïú Ïù¥Ï†Ñ ÏÉÅÌÉú Ï†ÄÏû•
          const previousBadges = new Map<string, any[]>();
          const newBadges = new Map<string, any[]>();
          targetCells.forEach((cellId) => {
            previousBadges.set(
              cellId,
              cellBadges[cellId] ? [...cellBadges[cellId]] : []
            );
          });

          // üöÄ Î∞∞Ïπò ÏóÖÎç∞Ïù¥Ìä∏Î°ú Í≤ΩÏüÅ Ï°∞Í±¥ Î∞©ÏßÄ Î∞è ÏÑ±Îä• Ìñ•ÏÉÅ
          React.startTransition(() => {
            // Î±ÉÏßÄ Ï†úÍ±∞ (Îπà ÏÉÅÌÉúÎ°ú)
            setCellBadges((prev) => {
              const updated = { ...prev };

              targetCells.forEach((cellId) => {
                delete updated[cellId]; // ÏôÑÏ†ÑÌûà Ï†úÍ±∞
                newBadges.set(cellId, []);
              });

              return updated;
            });

            // ÌîÑÎ°úÏÑ∏Ïä§ ÏãúÍ∞Ñ Ïò§Î≤ÑÎùºÏù¥Îìú Ï†úÍ±∞ -> Í∏∞Î≥∏Í∞íÏúºÎ°ú Î≥µÍ∑Ä
            setCellProcessTimes((prev) => {
              let hasChanges = false;
              const updated = { ...prev };
              targetCells.forEach((cellId) => {
                if (Object.prototype.hasOwnProperty.call(updated, cellId)) {
                  delete updated[cellId];
                  hasChanges = true;
                }
              });

              return hasChanges ? updated : prev;
            });

            // ÌûàÏä§ÌÜ†Î¶¨Ïóê Ï∂îÍ∞Ä
            setTimeout(() => {
              undoHistory.pushHistory({
                type: "setBadges",
                cellIds: targetCells,
                previousBadges,
                newBadges,
              });
            }, 0);
          });
        }
      }
    },
    [
      selectedCells,
      displaySelectedCells,
      contextMenu.show,
      disabledCells,
      setDisabledCells,
      setCellBadges,
      cellBadges,
      cellProcessTimes,
      setCellProcessTimes,
      undoHistory,
      handleUndo,
      handleRedo,
      handleCopy,
      handlePaste,
      copiedData,
      showMarchingAnts,
      setShowMarchingAnts,
      setCopiedData,
      setSelectedCells,
      setShiftSelectStart,
      containerRef,
    ]
  );

  return {
    handleKeyDown,
  };
}
